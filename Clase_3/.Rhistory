c(0 : 10 : 2)
seq(1, 6, by = 3)
seq(1, 6, by = 1)
seq(1, 10, by = 0.1)
seq(1, 1, by = 0.1)
seq(0, 1, by = 0.1)
#****************************************************************************************
# GRAPH 1:
#
x_axis = seq(0, 1, by = 0.1)
y_axis = x_axis^2
y_axis
#****************************************************************************************
# GRAPH 1:
#
x_axis = seq(0, 1, by = 0.1)
y_axis = (x_axis^2)*(1-x_axis)
y_axis
2/3
?data.frame
Data = data.frame(x_axis, y_axis)
View(Data)
ggplot(data = Data,
aes(x = x_axis, y = y_axis))
#install.packages("devtools")
#install.packages("ggplot2")
#install.packages("gganimate")
#install.packages("ggalt")
#install.packages("scales")
#install.packages("readxl")
#install.packages("dplyr")
#install.packages("ggrepel")
#
#devtools::install_github("thomasp85/gganimate", force = TRUE)
library(ggplot2)
ggplot(data = Data,
aes(x = x_axis, y = y_axis))
ggplot(data = Data,
aes(x = x_axis, y = y_axis)) +
geom_line(size = 0.5)
labs(
title = "Hogares que gastan en servicios de análisis clínicos y estudios médicos en laboratorios",
subtitle = "Porcentaje por decil de ingreso",
caption = "Fuente: Elaboración propia con información de INEGI - ENIGH, levantamientos 2006, 2008, 2010, 2012, 2014 y 2016. \nIncluye: Servicios de análisis clínicos y estudios médicos (consulta externa y servicios durante el embarazo)"
)
ggplot(data = Data,
aes(x = x_axis, y = y_axis)) +
geom_line(size = 0.5) +
xlab("p") +
ylab("p^2 (1-p)")
ggplot(data = Data,
aes(x = x_axis, y = y_axis)) +
geom_line(size = 0.5) +
xlab("p") +
ylab("p^2 (1-p)") +
labs(
title = "Hogares que gastan en servicios de análisis clínicos y estudios médicos en laboratorios",
subtitle = "Porcentaje por decil de ingreso",
caption = "Fuente: Elaboración propia con información de INEGI - ENIGH, levantamientos 2006, 2008, 2010, 2012, 2014 y 2016. \nIncluye: Servicios de análisis clínicos y estudios médicos (consulta externa y servicios durante el embarazo)"
)
ggplot(data = Data,
aes(x = x_axis, y = y_axis)) +
geom_line(size = 0.5) +
xlab("p") +
ylab("p^2 (1-p)") +
#
ggsave("p_3_lanzamientos.png", width = 20, height = 15, units = "cm")
ggplot(data = Data,
aes(x = x_axis, y = y_axis)) +
geom_line(size = 0.5, col = 'darkblue') +
xlab("p") +
ylab("p^2 (1-p)") +
#
ggsave("p_3_lanzamientos.png", width = 20, height = 15, units = "cm")
#****************************************************************************************
# GRAPH 1:
#
x_axis = seq(0, 1, by = 0.01)
y_axis = (x_axis^2)*(1-x_axis)
Data = data.frame(x_axis, y_axis)
ggplot(data = Data,
aes(x = x_axis, y = y_axis)) +
geom_line(size = 0.5, col = 'darkblue') +
xlab("p") +
ylab("p^2 (1-p)") +
#
ggsave("p_3_lanzamientos.png", width = 20, height = 15, units = "cm")
rand(10)
random()
rnorm(10)
A = 35*rnorm(100)
B = sample(A, 10, replace = TRUE)
B
?rnorm
A = rnorm(100, 35, 23)
B = sample(A, 10, replace = TRUE)
B
A = rnorm(100, 35, 4)
B = sample(A, 10, replace = TRUE)
B
mean(B)
round(B)
B = round(B)
C = mean(B)
c
C
D = B - C
D
D*D
E = D*D
e
E
sum(E)
sum(E)/9
sqrt(sum(E)/9)
#install.packages("devtools")
#install.packages("ggplot2")
#install.packages("gganimate")
#install.packages("ggalt")
#install.packages("scales")
#install.packages("readxl")
#install.packages("dplyr")
#install.packages("ggrepel")
#
#devtools::install_github("thomasp85/gganimate", force = TRUE)
library(ggplot2)
P = (3,3,7,6,10,15,16,13,9,15,9)
P = c(3,3,7,6,10,15,16,13,9,15,9)
P
Q = c(18,16,17,12,15,15,4,13,11,6,8)
UNO = c(1,1,1,1,1,1,1,1,1,1,1)
X = cbind(UNO, P)
X
t(X)
t(X)%*%Q
ggplot(aes(x=P, y=Q)) + geom_point()
df = data.frame(P, Q)
df
ggplot(df, aes(x=P, y=Q)) + geom_point()
X
Q
(t(X)%*%X)%*%t(X)%*%Q
solve(t(X)%*%X)%*%t(X)%*%Q
ggplot(df, aes(x=P, y=Q)) + geom_point() + geom_abline(intercept = 18.3977, slope = -0.6356, color="darkblue", linetype="dashed", size=1.5)
ggplot(df, aes(x=P, y=Q)) + geom_point() + geom_abline(intercept = 18.3977, slope = -0.6356, color="darkblue", linetype="dashed", size=1)
ggplot(df, aes(x=P, y=Q)) + geom_point() + geom_abline(intercept = 18.3977, slope = -0.6356, color="darkblue", linetype="dashed", size=0.5)
ggplot(df, aes(x=P, y=Q)) + geom_point() + geom_abline(intercept = 18.3977, slope = -0.6356, color="darkblue", size=1)
ggplot(df, aes(x=P, y=Q)) + geom_point() + geom_abline(intercept = 18.3977, slope = -0.6356, color="darkblue", size=0.8)
eq = paste0("Q = ", 18.3977, -0.6356, "P")
ggplot(df, aes(x=P, y=Q)) + geom_point() + geom_abline(intercept = 18.3977, slope = -0.6356, color="darkblue", size=0.8) + ggtitle(eq)
Z = (1650−1488)/sqrt(((93*93)/4)+((78*78)/4))
Z = (1650-1488)/sqrt(((93*93)/4)+((78*78)/4))
Z
Z = (1650-1488)/sqrt(((93*93)/4)+((78*78)/4))
(1.697-1.684)/2
(1.697+1.684)/2
2/(9/6)
T = sqrt(((129)*(2162^2) + (79)*(1961^2))/(208))
T
SS = sqrt(((129)*(2162^2) + (79)*(1961^2))/(208))
SS
T = (9017-5853)/(2087.939*sqrt((1/130)+(1/80)))
T
Z = (12.20-13.20)/(2.50/sqrt(40))
Z
Z = (70 - (100*0.67))/(100*0.67*(1 - 0.67))
Z
Z = (20 - (100*0.15))/(100*0.15*(1 - 0.15))
Z
Z = (192 - (300*0.67))/(300*0.67*(1 - 0.67))
Z
X = (7*0.018)/0.4
X
0.003/0.001
12.7/26.4
SS = sqrt(((13)*(12.7) + (9)*(14.9))/(22))
SS
SS = sqrt(((13)*(12.7) + (9)*(26.4))/(22))
SS
T = (9017-5853)/(SS*sqrt((1/130)+(1/80)))
T
T = (16.2-14.9)/(SS*sqrt((1/14)+(1/10)))
T
SS = sqrt(((3)*(93^2) + (3)*(78^2))/(6))
SS
T = (1650-1488)/(SS*sqrt((1/4)+(1/4)))
T
2162^2
1961^2
26.4/12.7
(2162^2)/(1961^2)
Y = c(4, 9, 10, 14, 4, 7, 12, 22, 1, 17)
t(Y)*Y
Y
Y*t(Y)
X = cbind(UNO, P)
t(X)%*%Q
Y%*%t(Y)
t(Y)%*%Y
Y = c(4, 9, 10, 14, 4, 7, 12, 22, 1, 17)
X = c(31, 58, 65, 73, 37, 44, 60, 91, 21, 84)
UNO = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
X = cbind(UNO, X)
solve(t(X) %*% X) %*% t(X) %*% Y
Y = ln(Y)
?log
Y = log(Y, base = exp(1))
X = c(31, 58, 65, 73, 37, 44, 60, 91, 21, 84)
X = log(X, base = exp(1))
X = cbind(UNO, X)
solve(t(X) %*% X) %*% t(X) %*% Y
X
Y
solve(t(X) %*% X) %*% t(X) %*% Y
Beta = solve(t(X) %*% X) %*% t(X) %*% Y
Sigma2 = t(Y) %*% Y - 2 * t(Beta) %*% t(X) %*% Y + t(Beta) %*% t(X) %*% X %*% Beta
View(Sigma2)
View(Sigma2)
Sigma2/8
solve(t(X) %*% X)
Sigma2 = (t(Y) %*% Y - 2 * t(Beta) %*% t(X) %*% Y + t(Beta) %*% t(X) %*% X %*% Beta)/8
Sigma2
Beta
sqrt(Sigma2*7.980981)
-5.440107/0.576707
sqrt(Sigma2*0.5067785)
1.893438/0.1453236
X[: , 2]
X(: , 2)
X[1]
X[2]
X[, 2]
plot(X[ , 2], Y)
Beta
exp(-5.440107 + 1.893438*20)
exp(-5.440107 + 1.893438*log(20, base = exp(1)))
log(20, base = exp(1))
exp(-5.440107 + 1.893438*log(22, base = exp(1)))
(-5.440107 + 1.893438*log(22, base = exp(1)))
(-5.440107 + 1.893438*log(20, base = exp(1)))
log(1)
log(20)
log(20)*1.893438
View(X)
Y = c(31, 58, 65, 73, 37, 44, 60, 91, 21, 84)
X = c(4, 9, 10, 14, 4, 7, 12, 22, 1, 17)
X = log(X, base = exp(1))
Y = log(Y, base = exp(1))
X = cbind(UNO, X)
View(X)
Beta = solve(t(X) %*% X) %*% t(X) %*% Y
View(Beta)
Sigma2 = (t(Y) %*% Y - 2 * t(Beta) %*% t(X) %*% Y + t(Beta) %*% t(X) %*% X %*% Beta)/8
View(Sigma2)
Beta
Sigma2*8
Sigma2
Beta
XX = solve(t(X) %*% X)
XX
sqrt(Sigma2*0.6544670)
sqrt(Sigma2*0.1349948)
2.9213083/0.6544670
0.5043708/0.1349948
exp(2.9213083 + 0.5043708*log(20, base = exp(1)))
?matrix
c(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32 & 950.71 & 6760.37 & 639.99 & 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58)
matrix(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32 & 950.71 & 6760.37 & 639.99 & 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58)
matrix(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32 & 950.71, 6760.37 & 639.99 & 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58)
matrix(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32, 950.71, 6760.37 & 639.99 & 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58)
matrix(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32, 950.71, 6760.37, 639.99 & 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58)
matrix(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32, 950.71, 6760.37, 639.99, 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58)
matrix(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32, 950.71, 6760.37, 639.99, 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58)
matrix( c(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32, 950.71, 6760.37, 639.99, 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58), nrow=5)
M = matrix( c(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32, 950.71, 6760.37, 639.99, 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58), nrow=5)
M[ c(2:5), c(2:5)]
M = matrix( c(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32, 950.71, 6760.37, 639.99, 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58), nrow=5)
XX = M[ c(2:5), c(2:5)]
M[ c(2:5), 1]
M[ 1, c(2:5)]
XY = M[ c(2:5), 1]
XY = t(M[ c(2:5), 1])
XY = t(M[ 1, c(2:5) ])
XY = (M[ 1, c(2:5) ])
XY = c(250.08, 2013.32, 170.94, 799.11)
XY = matrix(c(250.08, 2013.32, 170.94, 799.11), nrow=4)
Beta = solve(XX) %*% XY
Beta
Sigma2 = (722.36 - 2 * t(Beta) %*% XY + t(Beta) %*% XX %*% Beta)/145
Sigma2
Sigma2 = (722.36 - 2 * t(Beta) %*% XY + t(Beta) %*% XX %*% Beta)/141
Sigma2
solve(XX)
sqrt(Sigma2*0.76831766)
sqrt(Sigma2*0.001975969)
sqrt(Sigma2*0.517117619)
sqrt(Sigma2*0.2817871)
-4.6539661 / 0.3434763
0.7209163 / 0.01741873
0.4814452 / 0.2817871
0.4140101 / 0.2080113
R = c(0, 0, 1, 1)
R %*% solve(XX) %*% t(R)
t(R) %*% solve(XX) %*% R
Sigma2 * t(R) %*% solve(XX) %*% R
sqrt(Sigma2 * t(R) %*% solve(XX) %*% R)
(0.4814452 + 0.4140101 − 1) / sqrt(Sigma2 * t(R) %*% solve(XX) %*% R)
(0.4814452 + 0.4140101 - 1) / sqrt(Sigma2 * t(R) %*% solve(XX) %*% R)
library(ggplot2)
#library(gganimate)
library(ggalt)
library(scales)
library(readxl)
library(dplyr)
library(ggrepel)
#****************************************************************************************
install.packages("maptools")
#devtools::install_github("thomasp85/gganimate", force = TRUE)
library(maptools)
library(spdep)
install.packages("spdep")
#devtools::install_github("thomasp85/gganimate", force = TRUE)
library(maptools)
library(spdep)
install.packages("spdep")
#devtools::install_github("thomasp85/gganimate", force = TRUE)
library(maptools)
library(spdep)
install.packages("spdep")
# Series de Tiempo, Agosto de 2020
# Clase 2. Simulacion de un proceso estocastico
#****************************************************************************************
#install.packages("ggplot2")
#install.packages("dplyr")
#
library(ggplot2)
library(dplyr)
#****************************************************************************************
setwd("/Users/benjaminolivavazquez/Documents/Personal/Cursos_UNAM/SERIES_2021-I/Series-de-Tiempo-Fall2020/Clase_2")
getwd()
# Utilizaremos una función guardada en un archivo a parte
# Llamamos a la función:
source("Caminata.R")
# Definimos argumentos de la función
Opciones <- c(-1, 1)
#
Soporte <- 10000
# Vamos a réplicar el proceso con estos parámetros
Rango <- 200
#
Caminos <- 10
for(i in 1:Caminos){
TT <- data.matrix(data.frame(Caminata(Opciones, Soporte)[1]))
#
G_t <- data.matrix(data.frame(Caminata(Opciones, Soporte)[2]))
#
plot(TT, G_t, col = "blue", type = "l", ylab = "Ganancias", xlab = "Tiempo", ylim = c(-Rango,Rango))
#
par(new = TRUE)
#
i <- i +1
}
#
par(new = FALSE)
# Series de Tiempo, Agosto de 2020
# Clase 3. Autocorrelacion y otras pruebas sobre los datos
#****************************************************************************************
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("readxl")
#
library(ggplot2)
library(dplyr)
library(readxl)
#
#****************************************************************************************
setwd("/Users/benjaminolivavazquez/Documents/Personal/Cursos_UNAM/SERIES_2021-I/Series-de-Tiempo-Fall2020/Clase_3")
getwd()
Datos <- read_excel("Base_Transporte.xlsx", sheet = "Datos", col_names = TRUE)
Datos <- read_excel("Base_Transporte.xlsx", sheet = "Datos", col_names = TRUE)
View(Datos)
names(Datos)
head(Datos)
str(Datos)
dim(Datos)
Datos[ , 2]
Datos[5 , ]
Datos[c(2:197) , 2]
Datos[ , c(2:6)]
Datos[ ,c(2, 3, 4, 5, 6)]
Datos[c("Pax_Nal", "Pax_Int", "Vue_Nal", "Vue_Int")]
#****************************************************************************************
# Tabla de estadísticas decriptivas
#
summary( Datos[ ,c(2:6)] )
Resumen1 <- summary(Datos[ ,c(2:6)])
Resumen1
# Una serie - univariado:
Pax_Metro <- ts(Datos$Pax_Metro,
start = 2000,
freq = 12)
# Varias series - multivariado:
Dat_Aereo <- ts(Datos[c("Pax_Nal", "Pax_Int", "Vue_Nal", "Vue_Int")],
start = 2000,
freq = 12)
plot(Pax_Metro,
col = "darkblue",
xlab = "Tiempo",
type = "l", lwd = 2,
ylab = "Millones de personas",
main = "Pasajeros Transportados en el Metro de la CDMX \n(Ene-2000 a Jun-2019)",
sub = "Fuente: Elaboración propia con información del INEGI, https://www.inegi.org.mx/app/indicadores/?tm=0&t=1090")
ggplot(data = Datos, aes(x = Periodo, y = Pax_Metro)) +
geom_line(size = 0.5, color = "darkblue") +
#geom_point(size = 1.0, color = "darkblue") +
#theme_bw() +
xlab("Tiempo") +
ylab("Millones de pasajeros") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(size = 10, hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Pasajeros Transportados en el Metro de la CDMX",
subtitle = "(Ene-2000 a Jun-2019)",
caption = "Fuente: Elaboración propia con información del INEGI, \nhttps://www.inegi.org.mx/app/indicadores/?tm=0&t=1090"
)
#
ggsave("Pax_Metro.png", width = 20, height = 15, units = "cm")
ggplot(data = Datos, aes(x = Periodo)) +
geom_line(aes(y = Pax_Nal, color = "Pax_Nal")) +
geom_line(aes(y = Pax_Int, color = "Pax_Int")) +
scale_color_brewer(type = "qual", palette = 6) +
#theme_bw() +
theme(legend.position = "bottom") +
theme(legend.title = element_blank()) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
xlab("Tiempo") +
ylab("Pasajeros") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(size = 10, hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Pasajeros en vuelos nacionales e internacionales (Salidas)",
subtitle = "(Ene-2000 a Jun-2019)",
caption = "Fuente: Elaboración propia con información del INEGI, \nhttps://www.inegi.org.mx/app/indicadores/?tm=0&t=1090"
)
Tabla_Pax_Metro <- data.frame(matrix(c("Media",
"Varianza",
"Covarianza (t, t - 1)",
"Covarianza (t, t - 2)",
"Covarianza (t, t - 3)",
"Autocorrelacion(1)",
"Autocorrelacion(2)",
"Autocorrelacion(2)",
"Q(1)",
"Q(3)*"),
nrow = 10,
ncol = 1) )
View(Tabla_Pax_Metro)
# Series de Tiempo, Agosto de 2020
# Clase 3. Autocorrelacion y otras pruebas sobre los datos
#****************************************************************************************
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("readxl")
#
library(ggplot2)
#
Tabla_Pax_Metro
names(Tabla_Pax_Metro)
names(Tabla_Pax_Metro) <- c("Estadística")
Tabla_Pax_Metro
Tabla_Pax_Metro$Valor <- 0
Tabla_Pax_Metro
# Llenado de la tabla:
#
Tabla_Pax_Metro[1, 2] <- round(mean(Pax_Metro), digits = 2)
Tabla_Pax_Metro
Tabla_Pax_Metro[2, 2] <- round(var(Pax_Metro), digits = 2)
Tabla_Pax_Metro[3, 2] <- round(cov(Pax_Metro[2:234], Pax_Metro[1:233]), digits = 2)
Tabla_Pax_Metro[4, 2] <- round(cov(Pax_Metro[3:234], Pax_Metro[1:232]), digits = 2)
Tabla_Pax_Metro[5, 2] <- round(cov(Pax_Metro[4:234], Pax_Metro[1:231]), digits = 2)
Tabla_Pax_Metro[6, 2] <- round(Tabla_Pax_Metro[3, 2]/Tabla_Pax_Metro[2, 2], digits = 4)
Tabla_Pax_Metro[7, 2] <- round(Tabla_Pax_Metro[4, 2]/Tabla_Pax_Metro[2, 2], digits = 4)
Tabla_Pax_Metro[8, 2] <- round(Tabla_Pax_Metro[5, 2]/Tabla_Pax_Metro[2, 2], digits = 4)
Tabla_Pax_Metro[9, 2] <- 234*(Tabla_Pax_Metro[6, 2]^2)
Tabla_Pax_Metro[10, 2] <- 234*(Tabla_Pax_Metro[6, 2]^2 +
Tabla_Pax_Metro[7, 2]^2 +
Tabla_Pax_Metro[8, 2]^2)
#
Tabla_Pax_Metro
acf(Pax_Metro,
lag.max = 150,
xlab = 'Resagos k en meses',
main="Funcion de Autocorrelación del número de pasajeros del metro")
acf(Pax_Metro,
lag.max = 10,
xlab = 'Resagos k en meses',
main="Funcion de Autocorrelación del número de pasajeros del metro")
acf(Pax_Metro,
lag.max = 150,
xlab = 'Resagos k en meses',
main="Funcion de Autocorrelación del número de pasajeros del metro")
?acf
DD <- acf(Pax_Metro)
DD
summary(DD)
DD[]
DD <- acf(Pax_Metro)
DD$acf
