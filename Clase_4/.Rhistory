geom_point () +
geom_smooth ()
ggplot(data = base, aes(x = displ, y = autopista)) +
geom_point () +
geom_smooth (method = "lm", se = FALSE)
ggplot(data=base) +
geom_smooth(mapping = aes(x = displ, y = autopista, linetype = drv, color =drv))+
geom_point(mapping = aes(x = displ, y = autopista, color = drv))
?diamonds
plot(diamonds$carat, diamonds$price, col = diamonds$color)
ggplot(data = diamonds, aes(x = carat, y = price, shape = cut, color = color))+
geom_point()
knitr::opts_chunk$set(echo = TRUE)
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("readxl")
#install.packages(stats)
#install.packages("mFilter")
#
library(ggplot2)
library(dplyr)
library(readxl)
library(stats)
library(mFilter)
#Instalar paquetes.
#____________________________________________
install.packages("BiocManager")
BiocManager::install("Rgraphviz")
BiocManager::install("RBGL")
BiocManager::install("gRbase")
install.packages("bnlearn")
library(gRbase)    #Datos
BiocManager::install("gRbase")
library(gRbase)    #Datos
library(gRbase)    #Datos
#Instalar paquetes.
#____________________________________________
install.packages("BiocManager")
BiocManager::install("Rgraphviz")
BiocManager::install("graph")
BiocManager::install("RBGL")
BiocManager::install("gRbase")
install.packages("bnlearn")
library(gRbase)    #Datos
library(bnlearn)   #Aprendizaje de la Red Bayesiana
library(Rgraphviz) #Gráficar Redes
load("~/Downloads/F00007762-WV6_Data_R_v20180912")
library(haven)
WV6_Data_Stata_v20180912 <- read_dta("Downloads/WV6_Data_Stata_v20180912.dta")
View(WV6_Data_Stata_v20180912)
View(WV6_Data_Stata_v20180912)
load("~/Dropbox (GEG Latam)/GEGLATAM Economists/GB-GrupoBimbo/GB-Enigma/2020/Info cliente/Código/Reporte Interno/Datos3.RData")
View(Datos3)
x_axis = c(0:.1:1)
y_axis = x_axis^2
#****************************************************************************************
# GRAPH 1:
#
x_axis = c(0:.1:1)
y_axis = x_axis^2
y_axis
#****************************************************************************************
# GRAPH 1:
#
x_axis = c(0:0.1:1)
y_axis = x_axis^2
c(0:0.1:1)
c(0:10)
c(0: 2: 10)
c(0: 10: 2)
c(0 : 10 : 2)
seq(1, 6, by = 3)
seq(1, 6, by = 1)
seq(1, 10, by = 0.1)
seq(1, 1, by = 0.1)
seq(0, 1, by = 0.1)
#****************************************************************************************
# GRAPH 1:
#
x_axis = seq(0, 1, by = 0.1)
y_axis = x_axis^2
y_axis
#****************************************************************************************
# GRAPH 1:
#
x_axis = seq(0, 1, by = 0.1)
y_axis = (x_axis^2)*(1-x_axis)
y_axis
2/3
?data.frame
Data = data.frame(x_axis, y_axis)
View(Data)
ggplot(data = Data,
aes(x = x_axis, y = y_axis))
#install.packages("devtools")
#install.packages("ggplot2")
#install.packages("gganimate")
#install.packages("ggalt")
#install.packages("scales")
#install.packages("readxl")
#install.packages("dplyr")
#install.packages("ggrepel")
#
#devtools::install_github("thomasp85/gganimate", force = TRUE)
library(ggplot2)
ggplot(data = Data,
aes(x = x_axis, y = y_axis))
ggplot(data = Data,
aes(x = x_axis, y = y_axis)) +
geom_line(size = 0.5)
labs(
title = "Hogares que gastan en servicios de análisis clínicos y estudios médicos en laboratorios",
subtitle = "Porcentaje por decil de ingreso",
caption = "Fuente: Elaboración propia con información de INEGI - ENIGH, levantamientos 2006, 2008, 2010, 2012, 2014 y 2016. \nIncluye: Servicios de análisis clínicos y estudios médicos (consulta externa y servicios durante el embarazo)"
)
ggplot(data = Data,
aes(x = x_axis, y = y_axis)) +
geom_line(size = 0.5) +
xlab("p") +
ylab("p^2 (1-p)")
ggplot(data = Data,
aes(x = x_axis, y = y_axis)) +
geom_line(size = 0.5) +
xlab("p") +
ylab("p^2 (1-p)") +
labs(
title = "Hogares que gastan en servicios de análisis clínicos y estudios médicos en laboratorios",
subtitle = "Porcentaje por decil de ingreso",
caption = "Fuente: Elaboración propia con información de INEGI - ENIGH, levantamientos 2006, 2008, 2010, 2012, 2014 y 2016. \nIncluye: Servicios de análisis clínicos y estudios médicos (consulta externa y servicios durante el embarazo)"
)
ggplot(data = Data,
aes(x = x_axis, y = y_axis)) +
geom_line(size = 0.5) +
xlab("p") +
ylab("p^2 (1-p)") +
#
ggsave("p_3_lanzamientos.png", width = 20, height = 15, units = "cm")
ggplot(data = Data,
aes(x = x_axis, y = y_axis)) +
geom_line(size = 0.5, col = 'darkblue') +
xlab("p") +
ylab("p^2 (1-p)") +
#
ggsave("p_3_lanzamientos.png", width = 20, height = 15, units = "cm")
#****************************************************************************************
# GRAPH 1:
#
x_axis = seq(0, 1, by = 0.01)
y_axis = (x_axis^2)*(1-x_axis)
Data = data.frame(x_axis, y_axis)
ggplot(data = Data,
aes(x = x_axis, y = y_axis)) +
geom_line(size = 0.5, col = 'darkblue') +
xlab("p") +
ylab("p^2 (1-p)") +
#
ggsave("p_3_lanzamientos.png", width = 20, height = 15, units = "cm")
rand(10)
random()
rnorm(10)
A = 35*rnorm(100)
B = sample(A, 10, replace = TRUE)
B
?rnorm
A = rnorm(100, 35, 23)
B = sample(A, 10, replace = TRUE)
B
A = rnorm(100, 35, 4)
B = sample(A, 10, replace = TRUE)
B
mean(B)
round(B)
B = round(B)
C = mean(B)
c
C
D = B - C
D
D*D
E = D*D
e
E
sum(E)
sum(E)/9
sqrt(sum(E)/9)
#install.packages("devtools")
#install.packages("ggplot2")
#install.packages("gganimate")
#install.packages("ggalt")
#install.packages("scales")
#install.packages("readxl")
#install.packages("dplyr")
#install.packages("ggrepel")
#
#devtools::install_github("thomasp85/gganimate", force = TRUE)
library(ggplot2)
P = (3,3,7,6,10,15,16,13,9,15,9)
P = c(3,3,7,6,10,15,16,13,9,15,9)
P
Q = c(18,16,17,12,15,15,4,13,11,6,8)
UNO = c(1,1,1,1,1,1,1,1,1,1,1)
X = cbind(UNO, P)
X
t(X)
t(X)%*%Q
ggplot(aes(x=P, y=Q)) + geom_point()
df = data.frame(P, Q)
df
ggplot(df, aes(x=P, y=Q)) + geom_point()
X
Q
(t(X)%*%X)%*%t(X)%*%Q
solve(t(X)%*%X)%*%t(X)%*%Q
ggplot(df, aes(x=P, y=Q)) + geom_point() + geom_abline(intercept = 18.3977, slope = -0.6356, color="darkblue", linetype="dashed", size=1.5)
ggplot(df, aes(x=P, y=Q)) + geom_point() + geom_abline(intercept = 18.3977, slope = -0.6356, color="darkblue", linetype="dashed", size=1)
ggplot(df, aes(x=P, y=Q)) + geom_point() + geom_abline(intercept = 18.3977, slope = -0.6356, color="darkblue", linetype="dashed", size=0.5)
ggplot(df, aes(x=P, y=Q)) + geom_point() + geom_abline(intercept = 18.3977, slope = -0.6356, color="darkblue", size=1)
ggplot(df, aes(x=P, y=Q)) + geom_point() + geom_abline(intercept = 18.3977, slope = -0.6356, color="darkblue", size=0.8)
eq = paste0("Q = ", 18.3977, -0.6356, "P")
ggplot(df, aes(x=P, y=Q)) + geom_point() + geom_abline(intercept = 18.3977, slope = -0.6356, color="darkblue", size=0.8) + ggtitle(eq)
Z = (1650−1488)/sqrt(((93*93)/4)+((78*78)/4))
Z = (1650-1488)/sqrt(((93*93)/4)+((78*78)/4))
Z
Z = (1650-1488)/sqrt(((93*93)/4)+((78*78)/4))
(1.697-1.684)/2
(1.697+1.684)/2
2/(9/6)
T = sqrt(((129)*(2162^2) + (79)*(1961^2))/(208))
T
SS = sqrt(((129)*(2162^2) + (79)*(1961^2))/(208))
SS
T = (9017-5853)/(2087.939*sqrt((1/130)+(1/80)))
T
Z = (12.20-13.20)/(2.50/sqrt(40))
Z
Z = (70 - (100*0.67))/(100*0.67*(1 - 0.67))
Z
Z = (20 - (100*0.15))/(100*0.15*(1 - 0.15))
Z
Z = (192 - (300*0.67))/(300*0.67*(1 - 0.67))
Z
X = (7*0.018)/0.4
X
0.003/0.001
12.7/26.4
SS = sqrt(((13)*(12.7) + (9)*(14.9))/(22))
SS
SS = sqrt(((13)*(12.7) + (9)*(26.4))/(22))
SS
T = (9017-5853)/(SS*sqrt((1/130)+(1/80)))
T
T = (16.2-14.9)/(SS*sqrt((1/14)+(1/10)))
T
SS = sqrt(((3)*(93^2) + (3)*(78^2))/(6))
SS
T = (1650-1488)/(SS*sqrt((1/4)+(1/4)))
T
2162^2
1961^2
26.4/12.7
(2162^2)/(1961^2)
Y = c(4, 9, 10, 14, 4, 7, 12, 22, 1, 17)
t(Y)*Y
Y
Y*t(Y)
X = cbind(UNO, P)
t(X)%*%Q
Y%*%t(Y)
t(Y)%*%Y
Y = c(4, 9, 10, 14, 4, 7, 12, 22, 1, 17)
X = c(31, 58, 65, 73, 37, 44, 60, 91, 21, 84)
UNO = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
X = cbind(UNO, X)
solve(t(X) %*% X) %*% t(X) %*% Y
Y = ln(Y)
?log
Y = log(Y, base = exp(1))
X = c(31, 58, 65, 73, 37, 44, 60, 91, 21, 84)
X = log(X, base = exp(1))
X = cbind(UNO, X)
solve(t(X) %*% X) %*% t(X) %*% Y
X
Y
solve(t(X) %*% X) %*% t(X) %*% Y
Beta = solve(t(X) %*% X) %*% t(X) %*% Y
Sigma2 = t(Y) %*% Y - 2 * t(Beta) %*% t(X) %*% Y + t(Beta) %*% t(X) %*% X %*% Beta
View(Sigma2)
View(Sigma2)
Sigma2/8
solve(t(X) %*% X)
Sigma2 = (t(Y) %*% Y - 2 * t(Beta) %*% t(X) %*% Y + t(Beta) %*% t(X) %*% X %*% Beta)/8
Sigma2
Beta
sqrt(Sigma2*7.980981)
-5.440107/0.576707
sqrt(Sigma2*0.5067785)
1.893438/0.1453236
X[: , 2]
X(: , 2)
X[1]
X[2]
X[, 2]
plot(X[ , 2], Y)
Beta
exp(-5.440107 + 1.893438*20)
exp(-5.440107 + 1.893438*log(20, base = exp(1)))
log(20, base = exp(1))
exp(-5.440107 + 1.893438*log(22, base = exp(1)))
(-5.440107 + 1.893438*log(22, base = exp(1)))
(-5.440107 + 1.893438*log(20, base = exp(1)))
log(1)
log(20)
log(20)*1.893438
View(X)
Y = c(31, 58, 65, 73, 37, 44, 60, 91, 21, 84)
X = c(4, 9, 10, 14, 4, 7, 12, 22, 1, 17)
X = log(X, base = exp(1))
Y = log(Y, base = exp(1))
X = cbind(UNO, X)
View(X)
Beta = solve(t(X) %*% X) %*% t(X) %*% Y
View(Beta)
Sigma2 = (t(Y) %*% Y - 2 * t(Beta) %*% t(X) %*% Y + t(Beta) %*% t(X) %*% X %*% Beta)/8
View(Sigma2)
Beta
Sigma2*8
Sigma2
Beta
XX = solve(t(X) %*% X)
XX
sqrt(Sigma2*0.6544670)
sqrt(Sigma2*0.1349948)
2.9213083/0.6544670
0.5043708/0.1349948
exp(2.9213083 + 0.5043708*log(20, base = exp(1)))
?matrix
c(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32 & 950.71 & 6760.37 & 639.99 & 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58)
matrix(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32 & 950.71 & 6760.37 & 639.99 & 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58)
matrix(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32 & 950.71, 6760.37 & 639.99 & 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58)
matrix(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32, 950.71, 6760.37 & 639.99 & 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58)
matrix(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32, 950.71, 6760.37, 639.99 & 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58)
matrix(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32, 950.71, 6760.37, 639.99, 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58)
matrix(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32, 950.71, 6760.37, 639.99, 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58)
matrix( c(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32, 950.71, 6760.37, 639.99, 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58), nrow=5)
M = matrix( c(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32, 950.71, 6760.37, 639.99, 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58), nrow=5)
M[ c(2:5), c(2:5)]
M = matrix( c(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32, 950.71, 6760.37, 639.99, 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58), nrow=5)
XX = M[ c(2:5), c(2:5)]
M[ c(2:5), 1]
M[ 1, c(2:5)]
XY = M[ c(2:5), 1]
XY = t(M[ c(2:5), 1])
XY = t(M[ 1, c(2:5) ])
XY = (M[ 1, c(2:5) ])
XY = c(250.08, 2013.32, 170.94, 799.11)
XY = matrix(c(250.08, 2013.32, 170.94, 799.11), nrow=4)
Beta = solve(XX) %*% XY
Beta
Sigma2 = (722.36 - 2 * t(Beta) %*% XY + t(Beta) %*% XX %*% Beta)/145
Sigma2
Sigma2 = (722.36 - 2 * t(Beta) %*% XY + t(Beta) %*% XX %*% Beta)/141
Sigma2
solve(XX)
sqrt(Sigma2*0.76831766)
sqrt(Sigma2*0.001975969)
sqrt(Sigma2*0.517117619)
sqrt(Sigma2*0.2817871)
-4.6539661 / 0.3434763
0.7209163 / 0.01741873
0.4814452 / 0.2817871
0.4140101 / 0.2080113
R = c(0, 0, 1, 1)
R %*% solve(XX) %*% t(R)
t(R) %*% solve(XX) %*% R
Sigma2 * t(R) %*% solve(XX) %*% R
sqrt(Sigma2 * t(R) %*% solve(XX) %*% R)
(0.4814452 + 0.4140101 − 1) / sqrt(Sigma2 * t(R) %*% solve(XX) %*% R)
(0.4814452 + 0.4140101 - 1) / sqrt(Sigma2 * t(R) %*% solve(XX) %*% R)
library(ggplot2)
#library(gganimate)
library(ggalt)
library(scales)
library(readxl)
library(dplyr)
library(ggrepel)
#****************************************************************************************
install.packages("maptools")
#devtools::install_github("thomasp85/gganimate", force = TRUE)
library(maptools)
library(spdep)
install.packages("spdep")
#devtools::install_github("thomasp85/gganimate", force = TRUE)
library(maptools)
library(spdep)
install.packages("spdep")
#devtools::install_github("thomasp85/gganimate", force = TRUE)
library(maptools)
library(spdep)
install.packages("spdep")
# Series de Tiempo, Septiembre de 2020
# Clase 4. Simulación de un proceso AR(1)
#****************************************************************************************
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("readxl")
#
library(ggplot2)
library(dplyr)
library(readxl)
#
#****************************************************************************************
setwd("/Users/benjaminolivavazquez/Documents/Personal/Cursos_UNAM/SERIES_2021-I/Series-de-Tiempo-Fall2020/Clase_4")
getwd()
#****************************************************************************************
# Definamos la serie de tiempo
# El proceso AR(1) es: X_t = a0 + a1*X_t-1 + U_t
#
#****************************************************************************************
# Parametros:
delta <- 5; alpha <- 0.9; X_0 <- (delta/(1 - alpha)); T <- 1000
# Definimos un data frame para almacenar el proceso, agregamos una columna para el tiempo
X_t <- data.frame(Tiempo = c(0:T))
View(X_t)
# Agregamos un término estocástico al data frame
X_t$U_t <- rnorm(T+1, mean = 0, sd = 4)
View(X_t)
# GRÁFICA
ggplot(data = X_t, aes(x = Tiempo, y = U_t)) +
geom_line(size = 0.5, color = "darkblue") +
#theme_bw() +
xlab("Tiempo") +
ylab("U_t") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(size = 10, hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Proceso 'puramente' aleatorio",
subtitle = "Distribución Normal, media = 0, desviación estándar = 4",
caption = "Fuente: Elaboración propia."
)
# Agregamos columnas con NA's para un proceso teorico y uno real
X_t$X_t <- NA
X_t$XR_t <- NA
# La serie teórica inicia en un valor inicial X_0
X_t$X_t[1] <- X_0
# La serie real inicia en un valor inicial X_0
X_t$XR_t[1] <- X_0
# Agregamos una columna para la función de Autocorrelación teórica:
X_t$rho <-NA
# Real:
X_t$XR_t[i] = delta + alpha*X_t$XR_t[i-1] + X_t$U_t[i-1]
#****************************************************************************************
# Construcción de dos procesos: uno 'real' y uno 'estimado' o teórico y autocorrelación
for (i in 2:(T + 1)) {
# Real:
X_t$XR_t[i] = delta + alpha*X_t$XR_t[i-1] + X_t$U_t[i-1]
# Teórico:
X_t$X_t[i] = X_t$X_t[i-1] + (alpha^(i-1))*X_t$U_t[i-1]
# Autocorrelación:
X_t$rho[i-1] = alpha^(i-1)
}
View(X_t)
# GRÁFICA
ggplot(data = X_t, aes(x = Tiempo, y = X_t)) +
geom_line(size = 0.5, color = "darkblue") +
#theme_bw() +
xlab("Tiempo") +
ylab("X_t") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(size = 10, hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Comportamiento del Proceso Teórico",
subtitle = "Con un error con Distribución Normal (media = 0, desviación estándar = 4)",
caption = "Fuente: Elaboración propia."
)
ggsave("G_AR_1_Teo.png", width = 20, height = 10, units = "cm")
# GRÁFICA
ggplot(data = X_t, aes(x = Tiempo, y = XR_t)) +
geom_line(size = 0.5, color = "darkred") +
#theme_bw() +
xlab("Tiempo") +
ylab("X_t") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(size = 10, hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Comportamiento del Proceso Real ('Estimado')",
subtitle = "Con un error con Distribución Normal (media = 0, desviación estándar = 4)",
caption = "Fuente: Elaboración propia."
)
ggsave("G_AR_1_Real.png", width = 20, height = 10, units = "cm")
# GRÁFICA
ggplot(data = X_t, aes(x = Tiempo)) +
geom_line(aes(y = XR_t), size = 0.5, color = "darkred") +
geom_line(aes(y = X_t), size = 0.5, color = "darkblue") +
#theme_bw() +
xlab("Tiempo") +
ylab("X_t") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(size = 10, hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Comportamiento de los Procesos Real y Teórico",
subtitle = "Con un error con Distribución Normal (media = 0, desviación estándar = 4)",
caption = "Fuente: Elaboración propia."
)
ggsave("G_AR_1_Comb.png", width = 20, height = 10, units = "cm")
