matrix(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32, 950.71, 6760.37, 639.99, 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58)
matrix(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32, 950.71, 6760.37, 639.99, 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58)
matrix( c(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32, 950.71, 6760.37, 639.99, 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58), nrow=5)
M = matrix( c(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32, 950.71, 6760.37, 639.99, 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58), nrow=5)
M[ c(2:5), c(2:5)]
M = matrix( c(722.36, 250.08, 2013.32, 170.94, 799.11, 250.08, 145, 950.71, 97.39, 465.29, 2013.32, 950.71, 6760.37, 639.99, 3034.01, 170.94, 97.39, 639.99, 67.61, 314.63, 799.11, 465.29, 3034.01, 314.63, 1511.58), nrow=5)
XX = M[ c(2:5), c(2:5)]
M[ c(2:5), 1]
M[ 1, c(2:5)]
XY = M[ c(2:5), 1]
XY = t(M[ c(2:5), 1])
XY = t(M[ 1, c(2:5) ])
XY = (M[ 1, c(2:5) ])
XY = c(250.08, 2013.32, 170.94, 799.11)
XY = matrix(c(250.08, 2013.32, 170.94, 799.11), nrow=4)
Beta = solve(XX) %*% XY
Beta
Sigma2 = (722.36 - 2 * t(Beta) %*% XY + t(Beta) %*% XX %*% Beta)/145
Sigma2
Sigma2 = (722.36 - 2 * t(Beta) %*% XY + t(Beta) %*% XX %*% Beta)/141
Sigma2
solve(XX)
sqrt(Sigma2*0.76831766)
sqrt(Sigma2*0.001975969)
sqrt(Sigma2*0.517117619)
sqrt(Sigma2*0.2817871)
-4.6539661 / 0.3434763
0.7209163 / 0.01741873
0.4814452 / 0.2817871
0.4140101 / 0.2080113
R = c(0, 0, 1, 1)
R %*% solve(XX) %*% t(R)
t(R) %*% solve(XX) %*% R
Sigma2 * t(R) %*% solve(XX) %*% R
sqrt(Sigma2 * t(R) %*% solve(XX) %*% R)
(0.4814452 + 0.4140101 âˆ’ 1) / sqrt(Sigma2 * t(R) %*% solve(XX) %*% R)
(0.4814452 + 0.4140101 - 1) / sqrt(Sigma2 * t(R) %*% solve(XX) %*% R)
library(ggplot2)
#library(gganimate)
library(ggalt)
library(scales)
library(readxl)
library(dplyr)
library(ggrepel)
#****************************************************************************************
install.packages("maptools")
#devtools::install_github("thomasp85/gganimate", force = TRUE)
library(maptools)
library(spdep)
install.packages("spdep")
#devtools::install_github("thomasp85/gganimate", force = TRUE)
library(maptools)
library(spdep)
install.packages("spdep")
#devtools::install_github("thomasp85/gganimate", force = TRUE)
library(maptools)
library(spdep)
install.packages("spdep")
# Series de Tiempo, Octubre de 2020
# Clase 14. VAR(p)
#****************************************************************************************
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("stats")
#install.packages("vars", dependencies = TRUE)
#
library(ggplot2)
library(dplyr)
library(stats)
#installed.packages("MASS")
library(MASS)
library(strucchange)
library(zoo)
library(sandwich)
library(urca)
library(lmtest)
library(vars)
#
#****************************************************************************************
setwd("/Users/benjaminolivavazquez/Documents/Personal/Cursos_UNAM/SERIES_2021-I/Series-de-Tiempo-Fall2020/Clase_14")
getwd()
load("Datos_Ad.RData")
DLINPC <- ts(log(Datos_Ad$INPC_Ad) - lag(log(Datos_Ad$INPC_Ad), k = 1),
start = c(2000, 1),
freq = 12)
DLTC <- ts(log(Datos_Ad$TC_Ad) - lag(log(Datos_Ad$TC_Ad), k = 1),
start = c(2000, 1),
freq = 12)
DLCETE28 <- ts(log(Datos_Ad$CETE28_Ad) - lag(log(Datos_Ad$CETE28_Ad), k = 1),
start = c(2000, 1),
freq = 12)
DLIGAE <- ts(log(Datos_Ad$IGAE_Ad) - lag(log(Datos_Ad$IGAE_Ad), k = 1),
start = c(2000, 1),
freq = 12)
DLIPI <- ts(log(Datos_Ad$IPI_Ad) - lag(log(Datos_Ad$IPI_Ad), k = 1),
start = c(2000, 1),
freq = 12)
Datos <- data.frame(cbind(DLINPC, DLTC, DLCETE28, DLIGAE, DLIPI))
View(Datos)
Datos <- ts(Datos[2:235, ],
start = c(2000, 2), freq = 12)
plot(Datos, plot.type = "s",
col = c("darkgreen", "darkblue", "darkred", "black", "purple"),
main = "Series en Diferencias logaritmicas",
xlab = "Tiempo", ylab = "Variacion")
legend("bottomright", c("INPC", "TC", "CETES28", "IGAE", "IPI"),
cex = 0.6, lty = 1:1,
col = c("darkgreen", "darkblue", "darkred", "black", "purple"))
#
plot(Datos, plot.type = "m",
col = "darkgreen",
main = "Series en Diferencias logaritmicas", xlab = "Tiempo")
?VAR
VAR(Datos, p = 1)
VAR(Datos[ , 1:3], p = 1)
VAR(Datos[ , c(1, 2, 4, 5)], p = 1, exogen = Datos[ , 3])
VAR(Datos, p = 2)
VAR(Datos, p = 3)
(
VAR(Datos, p = 4)
VAR01 <- VAR(Datos, p = 4, type = "none")
names(VAR01)
summary(VAR01)
summary(VAR01, equation = "DLIGAE")
roots(VAR01)
VARselect(Datos, lag.max = 12, type = "both")
VARselect(Datos, lag.max = 12, type = "const")
VARselect(Datos, lag.max = 12, type = "none")
VAR02 <- VAR(Datos, p = 2)
summary(VAR02)
summary(VAR02, equation = "DLIGAE")
summary(VAR02, equation = "DLINPC")
summary(VAR02, equation = "DLCETE28")
plot(Datos, plot.type = "s",
col = c("darkgreen", "darkblue", "darkred", "black", "purple"),
main = "Series en Diferencias logaritmicas",
xlab = "Tiempo", ylab = "Variacion")
legend("bottomright", c("INPC", "TC", "CETES28", "IGAE", "IPI"),
cex = 0.6, lty = 1:1,
col = c("darkgreen", "darkblue", "darkred", "black", "purple"))
#
plot(Datos, plot.type = "m",
col = "darkgreen",
main = "Series en Diferencias logaritmicas", xlab = "Tiempo")
library(quantmod)
library(xts)
library(zoo)
library(quantmod)
#
#****************************************************************************************
setwd("/Users/benjaminolivavazquez/Documents/Personal/Cursos_UNAM/SERIES_2021-I/Series-de-Tiempo-Fall2020/Clase_14")
getwd()
#
#****************************************************************************************
setwd("/Users/benjaminolivavazquez/Documents/Personal/Cursos_UNAM/SERIES_2021-I/Series-de-Tiempo-Fall2020/Clase_21")
getwd()
?getSymbols
stock_namelist <- c("SPY", "AAPL", "YHOO")
# download data from YahooFinance
prices <- xts()
for (stock_index in 1:length(stock_namelist))
prices <- cbind(prices, Ad(getSymbols(stock_namelist[stock_index],
from = "2013-01-01", to = "2016-12-31", auto.assign = FALSE)))
colnames(prices) <- stock_namelist
indexClass(prices) <- "Date"
logreturns <- diff(log(prices))[-1]
head(prices)
stock_namelist <- c("SPY", "AAPL", "PFE")
# download data from YahooFinance
prices <- xts()
for (stock_index in 1:length(stock_namelist))
prices <- cbind(prices, Ad(getSymbols(stock_namelist[stock_index],
from = "2013-01-01", to = "2016-12-31", auto.assign = FALSE)))
colnames(prices) <- stock_namelist
indexClass(prices) <- "Date"
logreturns <- diff(log(prices))[-1]
head(prices)
?Ad
?getSymbols
getSymbols("TSLA")
getSymbols("TSLA", from = "2010-01-01",
to = "2020-11-30",
auto.assign = FALSE)
getSymbols("TSLA", from = "2011-01-01",
to = "2020-11-30",
auto.assign = FALSE)
# Example:
#
getSymbols("TSLA", from = "2011-01-01",
to = "2020-11-30",
auto.assign = FALSE)
Ad(getSymbols("TSLA", from = "2011-01-01",
to = "2020-11-30",
auto.assign = FALSE))
# Select a stock set
stock_namelist <- c("MRNA", "PFE", "TSLA")
prices <- xts()
for (stock_index in 1:length(stock_namelist))
prices <- cbind(prices, Ad(getSymbols(stock_namelist[stock_index],
from = "2011-01-01",
to = "2020-11-30",
auto.assign = FALSE)))
for (stock_index in 1:length(stock_namelist)){
prices <- cbind(prices, Ad(getSymbols(stock_namelist[stock_index],
from = "2011-01-01",
to = "2020-11-30",
auto.assign = FALSE)))
}
#
colnames(prices) <- stock_namelist
prices
# Select a stock set
stock_namelist <- c("AAPL", "PFE", "TSLA")
prices <- xts()
for (stock_index in 1:length(stock_namelist)){
prices <- cbind(prices, Ad(getSymbols(stock_namelist[stock_index],
from = "2011-01-01",
to = "2020-11-30",
auto.assign = FALSE)))
}
#
colnames(prices) <- stock_namelist
#
indexClass(prices) <- "Date"
logreturns <- diff(log(prices))[-1]
head(prices)
log(prices)
diff(log(prices))
diff(log(prices))[-1]
head(prices)
head(logreturns)
#****************************************************************************************
# Plot the three series of log-prices
plot(log(prices),
col = c("darkred", "darkblue", "darkgreen"),
main = "Log-prices of the three select stocks",
legend.loc = "topleft" )
#****************************************************************************************
# Plot the three series of log-prices
plot(log(prices),
col = c("darkred", "darkblue", "darkgreen"),
main = "Log-prices of the three select stocks",
legend.loc = "topleft" )
#****************************************************************************************
# Plot the three series of log-prices
#
plot(prices,
col = c("darkred", "darkblue", "darkgreen"),
main = "Log-prices of the three select stocks",
legend.loc = "topleft" )
#****************************************************************************************
# Plot the three series of levells, log-prices and difference
#
plot(prices,
col = c("darkred", "darkblue", "darkgreen"),
main = "Log-prices of the three select stocks",
legend.loc = "topleft" )
#
plot(log(prices),
col = c("darkred", "darkblue", "darkgreen"),
main = "Log-prices of the three select stocks",
legend.loc = "topleft" )
#
plot(logreturns,
col = c("darkred", "darkblue", "darkgreen"),
main = "Log-prices of the three select stocks",
legend.loc = "topleft" )
#
plot(logreturns,
plot.type = "m", nc = 2,
col = c("darkred", "darkblue", "darkgreen"),
main = "Log-prices of the three select stocks",
legend.loc = "topleft" )
#
plot(logreturns,
plot.type = "m", nc = 2,
col = c("darkred", "darkblue", "darkgreen"),
main = "Log-prices of the three select stocks",
legend.loc = "topleft" )
#
plot(logreturns,
plot.type = "s", nc = 2,
col = c("darkred", "darkblue", "darkgreen"),
main = "Log-prices of the three select stocks",
legend.loc = "topleft" )
#
plot(logreturns$AAPL,
col = c("darkred", "darkblue", "darkgreen"),
main = "Log-prices of the three select stocks",
legend.loc = "topleft" )
#
par(mfrow=c(1,2))
plot(logreturns$AAPL,
col = c("darkred", "darkblue", "darkgreen"),
main = "Log-prices of the three select stocks",
legend.loc = "topleft" )
par(mfrow=c(1,1))
#
par(mfrow=c(3, 1))
plot(logreturns$AAPL,
col = c("darkred", "darkblue", "darkgreen"),
main = "Log-returns",
legend.loc = "topleft" )
plot(logreturns$PFE,
col = c("darkred", "darkblue", "darkgreen"),
main = "Log-returns",
legend.loc = "topleft" )
plot(logreturns$TSLA,
col = c("darkred", "darkblue", "darkgreen"),
main = "Log-returns",
legend.loc = "topleft" )
#
par(mfrow=c(3, 1))
plot(logreturns$AAPL,
col = "darkred",
main = "Log-returns",
legend.loc = "topleft" )
plot(logreturns$PFE,
col = "darkblue",
main = "Log-returns",
legend.loc = "topleft" )
plot(logreturns$TSLA,
col = "darkgreen",
main = "Log-returns",
legend.loc = "topleft" )
library(rmgarch)  #install.packages("rmgarch")
install.packages("rmgarch")
library(rmgarch)
library(rugarch)
library(parallel)
library(rmgarch)
?ugarchspec
ugarch_spec <- ugarchspec(mean.model = list(armaOrder = c(1,1), include.mean = FALSE),
variance.model = list(model = "sGARCH", garchOrder = c(1,1)))
ugarch_spec
summary(ugarch_spec)
ugarch_spec <- ugarchspec(mean.model = list(armaOrder = c(1,1), include.mean = FALSE),
variance.model = list(model = "GARCH", garchOrder = c(1,1)))
ugarch_spec <- ugarchspec(mean.model = list(armaOrder = c(1,1), include.mean = FALSE),
variance.model = list(model = "sGARCH", garchOrder = c(1,1)))
?dccspec
?dccspec
ugarch_spec <- ugarchspec(mean.model = list(armaOrder = c(1,1), include.mean = FALSE),
variance.model = list(model = "sGARCH", garchOrder = c(1,1)))
# Multivariate model
dcc_spec <- dccspec(uspec = multispec(replicate(ugarch_spec, n = 3)),
VAR = TRUE, lag = 3,
model = "DCC",
dccOrder = c(1,1))
# estimate model
garchdcc_fit <- dccfit(dcc_spec,
data = logreturns,
solver = "nlminb")
garchdcc_fit
ugarch_spec <- ugarchspec(mean.model = list(armaOrder = c(1,1), include.mean = TRUE),
variance.model = list(model = "sGARCH", garchOrder = c(1,1)))
# Multivariate model
dcc_spec <- dccspec(uspec = multispec(replicate(ugarch_spec, n = 3)),
VAR = TRUE, lag = 3,
model = "DCC",
dccOrder = c(1,1))
# estimate model
garchdcc_fit <- dccfit(dcc_spec,
data = logreturns,
solver = "nlminb")
garchdcc_fit
names(garchdcc_fit)
?dccfit
summary(garchdcc_fit)
?dccfit
residuals(garchdcc_fit)
fitted(garchdcc_fit)
fitted(garchdcc_fit)
coef(garchdcc_fit)
garchdcc_fit
coef(garchdcc_fit)
show(garchdcc_fit)
sigma(garchdcc_fit)
plot(garchdcc_fit)
?MarchTest
??MarchTest
library(â€˜MTSâ€™)
library(MTS)
install.packages("MTS")
library(MTS)
?MarchTest
MarchTest(logreturns, lag = 3)
ugarch_spec <- ugarchspec(mean.model = list(armaOrder = c(1,1), include.mean = TRUE),
variance.model = list(model = "sGARCH", garchOrder = c(1,1)))
# Multivariate model
dcc_spec <- dccspec(uspec = multispec(replicate(ugarch_spec, n = 3)),
VAR = TRUE, lag = 3,
model = "DCC",
dccOrder = c(1,1))
# Estimate model
garchdcc_fit <- dccfit(dcc_spec,
data = logreturns,
solver = "nlminb")
garchdcc_fit
?dccspec
ugarch_spec <- ugarchspec(mean.model = list(armaOrder = c(1,1), include.mean = TRUE),
variance.model = list(model = "sGARCH", garchOrder = c(1,1)))
# Multivariate model
dcc_spec <- dccspec(uspec = multispec(replicate(ugarch_spec, n = 3)),
VAR = TRUE, lag = 3,
model = "DCC",
dccOrder = c(1,1))
# Estimate model
garchdcc_fit <- dccfit(dcc_spec,
data = logreturns,
solver = "nlminb")
garchdcc_fit
?dccspec
?ugarchspec
ugarch_spec <- ugarchspec(mean.model = list(armaOrder = c(1,1), include.mean = TRUE),
variance.model = list(model = "eGARCH", garchOrder = c(1,1)))
# Multivariate model
dcc_spec <- dccspec(uspec = multispec(replicate(ugarch_spec, n = 3)),
VAR = TRUE, lag = 3,
model = "DCC",
dccOrder = c(1,1))
# Estimate model
garchdcc_fit <- dccfit(dcc_spec,
data = logreturns,
solver = "nlminb")
garchdcc_fit
?dccspec
ugarch_spec <- ugarchspec(mean.model = list(armaOrder = c(1, 0), include.mean = TRUE),
variance.model = list(model = "eGARCH", garchOrder = c(1,1)))
# Multivariate model
dcc_spec <- dccspec(uspec = multispec(replicate(ugarch_spec, n = 3)),
VAR = TRUE, lag = 3,
model = "DCC",
dccOrder = c(1, 0))
# Estimate model
garchdcc_fit <- dccfit(dcc_spec,
data = logreturns,
solver = "nlminb")
garchdcc_fit
ugarch_spec <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean = TRUE),
variance.model = list(model = "eGARCH", garchOrder = c(1,1)))
# Multivariate model
dcc_spec <- dccspec(uspec = multispec(replicate(ugarch_spec, n = 3)),
VAR = TRUE, lag = 3,
model = "DCC",
dccOrder = c(1, 0))
# Estimate model
garchdcc_fit <- dccfit(dcc_spec,
data = logreturns,
solver = "nlminb")
garchdcc_fit
ugarch_spec <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean = FALSE),
variance.model = list(model = "eGARCH", garchOrder = c(1,1)))
# Multivariate model
dcc_spec <- dccspec(uspec = multispec(replicate(ugarch_spec, n = 3)),
VAR = TRUE, lag = 3,
model = "DCC",
dccOrder = c(1, 0))
# Estimate model
garchdcc_fit <- dccfit(dcc_spec,
data = logreturns,
solver = "nlminb")
garchdcc_fit
# Multivariate model
dcc_spec <- dccspec(uspec = multispec(replicate(ugarch_spec, n = 3)),
VAR = TRUE, lag = 3,
model = "DCC",
dccOrder = c(1, 1))
# Estimate model
garchdcc_fit <- dccfit(dcc_spec,
data = logreturns,
solver = "nlminb")
garchdcc_fit
ugarch_spec <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean = TRUE),
variance.model = list(model = "eGARCH", garchOrder = c(1, 0)))
# Multivariate model
dcc_spec <- dccspec(uspec = multispec(replicate(ugarch_spec, n = 3)),
VAR = TRUE, lag = 3,
model = "DCC",
dccOrder = c(1, 0))
# Estimate model
garchdcc_fit <- dccfit(dcc_spec,
data = logreturns,
solver = "nlminb")
garchdcc_fit
ugarch_spec <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean = TRUE),
variance.model = list(model = "eGARCH", garchOrder = c(1, 1)))
# Multivariate model
dcc_spec <- dccspec(uspec = multispec(replicate(ugarch_spec, n = 3)),
VAR = TRUE, lag = 3,
model = "DCC",
dccOrder = c(1, 1))
# Estimate model
garchdcc_fit <- dccfit(dcc_spec,
data = logreturns,
solver = "nlminb")
garchdcc_fit
plot(garchdcc_fit)
ugarch_spec <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
variance.model = list(model = "eGARCH", garchOrder = c(1, 1)))
# Multivariate model
dcc_spec <- dccspec(uspec = multispec(replicate(ugarch_spec, n = 3)),
VAR = TRUE, lag = 3,
model = "DCC",
dccOrder = c(1, 1))
# Estimate model
garchdcc_fit <- dccfit(dcc_spec,
data = logreturns,
solver = "nlminb")
garchdcc_fit
# Determinamos Efectos ARCH
MarchTest(logreturns, lag = 3)
